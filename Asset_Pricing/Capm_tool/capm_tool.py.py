# -*- coding: utf-8 -*-
"""Untitled98.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mSRYsjGg3VrSiL05-sAXCMqXEZPKSHeH

# =============== Minimal CAPM =====================================
## - Input: Ticker + date range
## - Data: Yahoo Finance for Ticker & S&P 500 (^GSPC)
## - Risk-free: simple fixed annual rate (edit rf_annual if you want)
## - Output: Alpha, Beta, R^2 + Security Market Line plot
## ==================================================================
"""

!pip -q install yfinance pandas numpy statsmodels matplotlib

import numpy as np
import pandas as pd
import yfinance as yf
import statsmodels.api as sm
import matplotlib.pyplot as plt

# ---- 1) Inputs -----------------------------------------------------------
print("CAPM—minimal version")
ticker = input("Ticker (e.g., AAPL): ").strip().upper()
start  = input("Start date (YYYY-MM-DD): ").strip()
end    = input("End date   (YYYY-MM-DD): ").strip()

# Simple assumption for risk-free rate (annual). Change this if you like.
rf_annual = 0.02   # 2% annual risk-free
TRADING_DAYS = 252
rf_daily = rf_annual / TRADING_DAYS

# ---- 2) Download prices (adjusted close) ---------------------------------
# We pull your asset and the market (^GSPC). auto_adjust=True handles splits/dividends.
data = yf.download([ticker, "^GSPC"], start=start, end=end, auto_adjust=True, progress=False)

# Handle single vs multiindex to extract Close cleanly
if isinstance(data.columns, pd.MultiIndex):
    prices = data["Close"].copy()
else:
    prices = data.copy()

if ticker not in prices.columns or "^GSPC" not in prices.columns:
    raise ValueError("Could not fetch both series. Check the ticker or date range.")

# ---- 3) Compute daily simple returns & align -----------------------------
rets = prices.pct_change().dropna()
rets = rets[[ticker, "^GSPC"]].dropna()
rets.columns = ["asset_ret", "mkt_ret"]

# ---- 4) Convert to EXCESS returns (r - rf) -------------------------------
rets["asset_excess"] = rets["asset_ret"] - rf_daily
rets["mkt_excess"]   = rets["mkt_ret"]   - rf_daily

# ---- 5) CAPM regression: asset_excess = alpha + beta * mkt_excess + eps --
X = sm.add_constant(rets["mkt_excess"])
y = rets["asset_excess"]
model = sm.OLS(y, X).fit()

alpha_daily = model.params["const"]
beta        = model.params["mkt_excess"]
r2          = model.rsquared

# Annualized summaries (using daily->annual ~*252)
asset_ann = rets["asset_ret"].mean() * TRADING_DAYS
mkt_ann   = rets["mkt_ret"].mean()   * TRADING_DAYS
alpha_ann = alpha_daily * TRADING_DAYS

capm_expected_ann = rf_annual + beta * (mkt_ann - rf_annual)   # SML expected return
jensen_alpha_ann  = asset_ann - capm_expected_ann

# ---- 6) Print a tiny summary --------------------------------------------
print("\n=== CAPM Summary ===")
print(f"Ticker: {ticker} | Period: {start} → {end}")
print(f"Beta (β):             {beta:.3f}")
print(f"Alpha (daily):        {alpha_daily:.6f}")
print(f"Alpha (annualized):   {alpha_ann:.4%}")
print(f"R²:                   {r2:.3f}")
print(f"Asset return (annual): {asset_ann:.2%}")
print(f"Market return (annual):{mkt_ann:.2%}")
print(f"Risk-free (annual):    {rf_annual:.2%}")
print(f"CAPM expected (annual):{capm_expected_ann:.2%}")
print(f"Jensen's alpha (annual): {jensen_alpha_ann:.2%}")

# ---- 7) Plot: Security Market Line (SML) + your asset --------------------
betas = np.linspace(0, max(2, beta*1.4), 50)
market_premium = mkt_ann - rf_annual
sml = rf_annual + betas * market_premium

plt.figure(figsize=(8,6))
plt.plot(betas, sml, label="SML")                          # Theoretical line
plt.scatter([beta], [asset_ann], s=60, label=f"{ticker} (realized)")
plt.scatter([beta], [capm_expected_ann], s=60, marker="x", label=f"{ticker} (CAPM exp.)")
plt.xlabel("Beta (β)")
plt.ylabel("Annual Return")
plt.title(f"Security Market Line — {ticker} vs S&P 500  |  {start} → {end}")
plt.legend()
plt.grid(True, alpha=0.2)
plt.show()

# ---- 8) What to remember -------------------------------------------------
print("\nHow to read it:")
print("- SML shows required return for each beta given rf & market premium.")
print("- Your stock’s point: realized annual return at its estimated beta.")
print("- The 'X' is CAPM-expected return at that beta.")
print("- Jensen’s alpha (annual) > 0 suggests outperformance vs CAPM.")