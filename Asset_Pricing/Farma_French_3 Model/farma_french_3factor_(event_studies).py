# -*- coding: utf-8 -*-
"""Farma French_3factor_(Event_studies).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14CcANI-6wMihM3BsYzO7e7xginVkb3Qd

## Import Libraries
"""

# Install packages necessary for the event study
!pip install eventstudy

# !pip install --upgrade pandas-datareader
import yfinance as yf

# Basic libraries
import pandas_datareader.data as web
import pandas as pd
import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm

# Libraries for EventStudy Package
import eventstudy as es
print(es.__version__)
from eventstudy import excelExporter

"""### Information needed for FF-3 model

### 1. Import Fama French Data

* Use the link to directly download the file from the authors' website
* Unzip the file
* Format the file to make it clean (Remove rows and rename column)
* Save it in your local disk
"""

import requests
import zipfile
import pandas as pd
from io import BytesIO

# Step 1: Download the ZIP file
url = 'https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily_CSV.zip'
response = requests.get(url)

# Step 2: Unzip the file to the current directory
with zipfile.ZipFile(BytesIO(response.content)) as z:
    csv_file_name = z.namelist()[0]  # Get the name of the only file in the ZIP
    z.extractall()

# Step 3: Read the CSV into a DataFrame and drop the first four rows
ff_daily = pd.read_csv(csv_file_name, skiprows=range(4))

# Step 4: Rename the first column "Date", drop last row that contains "Copyright"
ff_daily.rename(columns={ff_daily.columns[0]: 'date'}, inplace=True)
ff_daily.drop(ff_daily.tail(1).index, inplace=True)
ff_daily

# Step 5: Convert the 'Date' column back to integers and then to datetime format
ff_daily['date'] = pd.to_datetime(ff_daily['date'], format='%Y%m%d')
# ff_daily['date'] = ff_daily['date'].dt.strftime('%Y%m%d') # Remove this line

# Step 6: Save the modified DataFrame back to a CSV file
ff_daily.to_csv(csv_file_name, index=False)
print("File has been downloaded, modified, and saved to the current directory.")

"""### 2. Download the returns for your stock and the market"""

start = dt.datetime(2010, 1, 1)
end = dt.datetime(2025, 8, 6)

# Download Monster's prices and get returns
returns = yf.download('NVDA',  start, end, interval = '1d')
returns['NVDA'] = returns['Close'].pct_change()
print(ff_daily)
print(returns['NVDA'])

# Take the date out of the index
returns.reset_index(inplace=True)
# Rename the index from 'Date' to 'date'
returns.rename(columns={'Date': 'date'}, inplace=True)

# Flatten the multi-level columns
returns.columns = ['_'.join(col).strip() if isinstance(col, tuple) else col for col in returns.columns.values]

# Correctly rename the date column and NVDA returns column after flattening
returns.rename(columns={'date_': 'date', 'NVDA_': 'NVDA'}, inplace=True)

#merge in the daily returns

data = pd.merge(returns, ff_daily, how= 'inner' , on='date')
print(data.columns)
# Save the dataset
returns.to_csv('returns.csv', index=False)

"""### 3. Run the FF-3 factor model regression"""

ff_daily['date'] = pd.to_datetime(ff_daily['date'], format='%Y%m%d')

# Merge all your data together:
data = pd.merge(returns, ff_daily, how='inner', on='date')

X = data[['Mkt-RF', 'SMB', 'HML']]
X = sm.add_constant(X)  # Adds a constant term to the predictor
Y = data['NVDA'] # Changed 'AAPL' to 'NVDA'
# Run the regression
ff3 = sm.OLS(Y, X).fit() # Changed 'y' to 'Y'
# Print the results of the regression
print(ff3.summary())

"""### 4. What's the point of all this???

The estimates above allow us to calculate what the return of Apple **should** be on the basis of some characteristics that traditionally determine stock returns. We can use these estimates to measure how the real return differs from the actual return on a regular day and on "special" days.

## Example 1: Use FF-3 model to determine the abnormal return after a single event for Apple

As an introductory example, we will compute the event study analysis of the announcement of the first iphone, made by Steve Jobs during MacWorld exhibition, on January 7, 2007.

1. Run the event study, here using the Fama-French 3-factor model:
"""

from datetime import timedelta
# Define your event_date and convert it to datetime format
event_date = '2025-02-01'
# event_date = '2000-09-28'
event_date = pd.to_datetime(event_date)

# Define your estimation window period
start_date = event_date - timedelta(days=200)
end_date = event_date - timedelta(days=1)
print(start_date)

# Define the event window (10 days before and 10 days after the event)
start_event_window = event_date - pd.Timedelta(days=5)
end_event_window   = event_date + pd.Timedelta(days=10)

# Data for the pre-event estimation
pre_returns   = data.loc[(data['date'] >= start_date) & (data['date'] <= end_date)].copy() # Using .loc for slicing
event_returns = data.loc[(data['date'] >= start_event_window) & (data['date'] <= end_event_window)].copy() # Using .loc for slicing
print(event_returns)
# event_data = returns[(data['date'] > event_date) & (data['date'] <= event_window)]

# Step 2: Estimate the Model using pre-event estimation window data
X_est = sm.add_constant(pre_returns[['Mkt-RF', 'SMB', 'HML']])
Y_est = pre_returns['NVDA'] # Changed 'MNST' to 'NVDA'
ff3_pre = sm.OLS(Y_est, X_est).fit()

# Step 3: Forecast Normal Returns for the event window
X_event = sm.add_constant(event_returns[['Mkt-RF', 'SMB', 'HML']])
Y_event_actual = event_returns['NVDA'] ## in the actual period # Changed 'MNST' to 'NVDA'
Y_event_forecast = ff3_pre.predict(X_event) ##The benchmarked 'The predicted'

# The standard error of the residuals can be obtained from the regression model summary
std_error = ff3_pre.resid.std()

# Step 4: Calculate Abnormal Returns
event_returns['Abnormal_Returns'] = Y_event_actual - Y_event_forecast
print(event_returns['Abnormal_Returns'])

"""### Plotting the Abnormal Returns (AR) around the event"""

### Step 5: Plot the figure for the Abnormal Returns

# Calculate the 95% confidence interval around the abnormal returns
confidence_interval_upper = event_returns['Abnormal_Returns'] + 1.96 * std_error
confidence_interval_lower = event_returns['Abnormal_Returns'] - 1.96 * std_error

# Step 5: Plot Abnormal Returns with enhancements
plt.figure(figsize=(14, 7))

# Plot the abnormal returns as a line plot
plt.plot(event_returns['date'], event_returns['Abnormal_Returns'], marker='o', linestyle='-', color='b', label='Abnormal Returns')

# Plot the 95% confidence interval
plt.fill_between(event_returns['date'], confidence_interval_lower, confidence_interval_upper, color='gray', alpha=0.3, label='95% Confidence Interval')

# Add a vertical line at the event date
plt.axvline(x=event_date, color='r', linestyle='-', label='Event Date')

# Add a horizontal line at zero abnormal return
plt.axhline(0, color='red', linestyle=':', label='Zero Abnormal Return')

# Labels and title
plt.xlabel('Date')
plt.ylabel('Abnormal Returns')
plt.title('Abnormal Returns 10-Days Before and 10-Days After the Event with 95% Confidence Interval')
plt.legend()
plt.grid(True)

# Rotate x-axis labels for better visibility
plt.xticks(rotation=45)
# Set x-axis to show every day
plt.gca().xaxis.set_major_locator(plt.MultipleLocator(1))

# plt.savefig('Event_study_abnormal_returns')
plt.show()

"""### Plot the cumulative abnornal return (CAR) around the event"""

### Calculate the Cumulative Abnormal Returns (CAR) for the entire event window
event_data = event_returns.copy()
event_data['Cumulative_Abnormal_Returns'] = event_data['Abnormal_Returns'].cumsum()

### Calculate the 95% confidence interval around the Cumulative Abnormal Returns
cumulative_std_error = np.sqrt(np.arange(1, len(event_data) + 1)) * std_error
cumulative_confidence_interval_upper = event_data['Cumulative_Abnormal_Returns'] + 1.96 * cumulative_std_error
cumulative_confidence_interval_lower = event_data['Cumulative_Abnormal_Returns'] - 1.96 * cumulative_std_error
# --- Note: The confidence interval grows with the square root of time


# Step 5: Plot Cumulative Abnormal Returns with enhancements for the entire event window
plt.figure(figsize=(14, 7))

# Plot the Cumulative Abnormal Returns as a line plot
plt.plot(event_data['date'], event_data['Cumulative_Abnormal_Returns'], marker='o', linestyle='-', color='b', label='Cumulative Abnormal Returns')

# Plot the 95% confidence interval
plt.fill_between(event_data['date'], cumulative_confidence_interval_lower, cumulative_confidence_interval_upper, color='gray', alpha=0.3, label='95% Confidence Interval')

# Add a vertical line at the event date
plt.axvline(x=event_date, color='r', linestyle='--', label='Event Date')

# Add a horizontal line at zero cumulative abnormal return
plt.axhline(0, color='red', linestyle='--', label='Zero Cumulative Abnormal Return')

# Labels and title
plt.xlabel('Date')
plt.ylabel('Cumulative Abnormal Returns')
plt.title('Cumulative Abnormal Returns 10-Days Before and 10-Days After the Event with 95% Confidence Interval')
plt.legend()
plt.grid(True)

# Rotate x-axis labels for better visibility
plt.xticks(rotation=45)
# Set x-axis to show every day
plt.gca().xaxis.set_major_locator(plt.MultipleLocator(1))

plt.show()